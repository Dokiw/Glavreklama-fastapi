import importlib.util
import pkgutil
import sys
import traceback
from pathlib import Path
from fastapi import FastAPI

from fastapi.middleware.cors import CORSMiddleware
import importlib
import pkgutil
from contextlib import asynccontextmanager
import logging

import os
import time
import json
import traceback
from fastapi import FastAPI, Request

logger = logging.getLogger("uvicorn")
logger.setLevel(logging.DEBUG)


@asynccontextmanager
async def lifespan(app: FastAPI):
    # üöÄ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    import_all_routes(app, "app.handlers")

    yield  # ‚Üê –∑–¥–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    # üõë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î


app = FastAPI(lifespan=lifespan)

origins = [
    "http://localhost",
    "http://localhost:3000",
    "http://localhost:5173",
    "http://127.0.0.1:8080",
    "http://127.0.0.1:9787",
    "https://glavprojects.ru",
    "https://catcheggsapp.web.app",
    "https://admin.glavprojects.ru",
]

# –ü–æ–¥–∫–ª—é—á–∞–µ–º CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

LOG_DIR = "/var/log/fastapi"
LOG_FILE = os.path.join(LOG_DIR, "log.txt")
MAX_BODY_SNIPPET = 200  # —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ —Ç–µ–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å

# –ø—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞/—Ñ–∞–π–ª–∞
os.makedirs(LOG_DIR, exist_ok=True)


# —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞—é—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ—Ç –∫–∞—Ç–∞–ª–æ–≥:
# sudo chown -R <user>:<group> /var/log/fastapi

def mask_headers(h: dict) -> dict:
    out = {}
    for k, v in h.items():
        if k.lower() == "authorization":
            out[k] = "<masked>"
        else:
            out[k] = v
    return out


def append_log(obj: dict):
    try:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(json.dumps(obj, ensure_ascii=False) + "\n")
    except Exception:
        # –µ—Å–ª–∏ –ª–æ–≥ –Ω–µ –ø–∏—à–µ—Ç—Å—è ‚Äî –Ω–µ –ª–æ–º–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        pass


@app.middleware("http")
async def simple_logger_middleware(request: Request, call_next):
    start = time.time()

    # –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å stream –¥–ª—è endpoint
    try:
        body_bytes = await request.body()
    except Exception:
        body_bytes = b""

    async def receive():
        return {"type": "http.request", "body": body_bytes}

    # –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    request._receive = receive  # —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ FastAPI/Starlette

    client_ip = request.headers.get("x-forwarded-for") or (request.client.host if request.client else None)
    headers = dict(request.headers)
    headers = mask_headers(headers)
    qs = dict(request.query_params)
    body_snippet = None
    if body_bytes:
        try:
            text = body_bytes.decode("utf-8", errors="replace")
            body_snippet = text[:MAX_BODY_SNIPPET]
            if len(text) > MAX_BODY_SNIPPET:
                body_snippet += " ...(truncated)"
        except Exception:
            body_snippet = f"<{len(body_bytes)} bytes>"

    req_log = {
        "event": "request.start",
        "ts": int(start),
        "method": request.method,
        "path": str(request.url.path),
        "url": str(request.url),
        "client_ip": client_ip,
        "headers": headers,
        "query": qs,
        "body_snippet": body_snippet,
    }
    append_log(req_log)

    try:
        response = await call_next(request)
        duration = time.time() - start

        resp_log = {
            "event": "request.end",
            "ts": int(time.time()),
            "method": request.method,
            "path": str(request.url.path),
            "status_code": response.status_code,
            "duration_s": round(duration, 3),
            "response_content_length": response.headers.get("content-length"),
        }
        append_log(resp_log)
        return response

    except Exception as ex:
        duration = time.time() - start
        err_log = {
            "event": "request.exception",
            "ts": int(time.time()),
            "method": request.method,
            "path": str(request.url.path),
            "duration_s": round(duration, 3),
            "error": str(ex),
            "traceback": traceback.format_exc(),
        }
        append_log(err_log)
        raise


def import_all_routes(app: FastAPI, package_name: str):
    logger = __import__("logging").getLogger("uvicorn")
    try:
        pkg = importlib.import_module(package_name)
    except ModuleNotFoundError as e:
        logger.warning(f"–ü–∞–∫–µ—Ç {package_name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        logger.debug("sys.path:\n" + "\n".join(repr(p) for p in sys.path))
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–∞–∫–µ—Ç–∞ {package_name}: {e}\n{traceback.format_exc()}")
        return

    # –ª–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω
    if not hasattr(pkg, "__path__"):
        logger.warning(f"{package_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–∫–µ—Ç–æ–º (–Ω–µ—Ç __path__)")
        return

    pkg_paths = list(pkg.__path__)  # –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
    logger.info(f"{package_name}.__path__: {pkg_paths}")

    # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ‚Äî –ø–æ–∫–∞–∂–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏ –≤ __path__
    for p in pkg_paths:
        try:
            p_path = Path(p).resolve()
            listing = sorted([x.name for x in p_path.iterdir()])
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ {p_path}: {listing}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {p}: {e}")

    # –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –ø–æ–¥–º–æ–¥—É–ª–∏ (–ø–∞–ø–∫–∏/—Ñ–∞–π–ª—ã) –∏ –ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {package}.{name}.router
    for finder, name, ispkg in pkgutil.iter_modules(pkg.__path__):
        module_name = f"{package_name}.{name}.router"
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {module_name} (ispkg={ispkg})")
        try:
            # –±—ã—Å—Ç—Ä—ã–π pre-check: –µ—Å—Ç—å –ª–∏ spec?
            spec = importlib.util.find_spec(module_name)
            if spec is None:
                logger.debug(f"find_spec –≤–µ—Ä–Ω—É–ª None –¥–ª—è {module_name}")
            else:
                logger.debug(f"spec.origin={getattr(spec, 'origin', None)}; loader={getattr(spec, 'loader', None)}")

            module = importlib.import_module(module_name)
            if hasattr(module, "router"):
                app.include_router(module.router)
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω —Ä–æ—É—Ç–µ—Ä: {module_name} ‚Üí {module.router}")
            else:
                logger.warning(f"–ú–æ–¥—É–ª—å {module_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'router'")
        except ModuleNotFoundError as e:
            # –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥, —á—Ç–æ–± –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–∏–º—è –≤ e.name)
            logger.warning(f"ModuleNotFoundError –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {module_name}: {e}; e.name={getattr(e, 'name', None)}")
            logger.debug(traceback.format_exc())
        except Exception as e:
            logger.error(f"[import_all_routes] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {module_name}: {e}\n{traceback.format_exc()}")


@app.get("/")
async def root():
    return {"message": "Hello World"}


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="127.0.0.1", port=9787, timeout_keep_alive=120)
