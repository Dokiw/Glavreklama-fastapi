import importlib.util
import pkgutil
import sys
import traceback
from pathlib import Path
from fastapi import FastAPI

from fastapi.middleware.cors import CORSMiddleware
import importlib
import pkgutil
from contextlib import asynccontextmanager
import logging

logger = logging.getLogger("uvicorn")
logger.setLevel(logging.DEBUG)

@asynccontextmanager
async def lifespan(app: FastAPI):
    # üöÄ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    import_all_routes(app, "app.handlers")

    yield  # ‚Üê –∑–¥–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    # üõë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î



app = FastAPI(lifespan=lifespan)

origins = [
    "http://localhost",
    "http://localhost:3000",
    "http://localhost:5173",
    "http://127.0.0.1:8080",
    "http://127.0.0.1:9787",
    "https://glavprojects.ru",
    "https://catcheggsapp.web.app",
    "https://admin.glavprojects.ru",
]

# –ü–æ–¥–∫–ª—é—á–∞–µ–º CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def import_all_routes(app: FastAPI, package_name: str):
    logger = __import__("logging").getLogger("uvicorn")
    try:
        pkg = importlib.import_module(package_name)
    except ModuleNotFoundError as e:
        logger.warning(f"–ü–∞–∫–µ—Ç {package_name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        logger.debug("sys.path:\n" + "\n".join(repr(p) for p in sys.path))
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–∞–∫–µ—Ç–∞ {package_name}: {e}\n{traceback.format_exc()}")
        return

    # –ª–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–∞–∫–µ—Ç –Ω–∞–π–¥–µ–Ω
    if not hasattr(pkg, "__path__"):
        logger.warning(f"{package_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–∫–µ—Ç–æ–º (–Ω–µ—Ç __path__)")
        return

    pkg_paths = list(pkg.__path__)  # –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
    logger.info(f"{package_name}.__path__: {pkg_paths}")

    # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ ‚Äî –ø–æ–∫–∞–∂–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏ –≤ __path__
    for p in pkg_paths:
        try:
            p_path = Path(p).resolve()
            listing = sorted([x.name for x in p_path.iterdir()])
            logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ {p_path}: {listing}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {p}: {e}")

    # –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –ø–æ–¥–º–æ–¥—É–ª–∏ (–ø–∞–ø–∫–∏/—Ñ–∞–π–ª—ã) –∏ –ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {package}.{name}.router
    for finder, name, ispkg in pkgutil.iter_modules(pkg.__path__):
        module_name = f"{package_name}.{name}.router"
        logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {module_name} (ispkg={ispkg})")
        try:
            # –±—ã—Å—Ç—Ä—ã–π pre-check: –µ—Å—Ç—å –ª–∏ spec?
            spec = importlib.util.find_spec(module_name)
            if spec is None:
                logger.debug(f"find_spec –≤–µ—Ä–Ω—É–ª None –¥–ª—è {module_name}")
            else:
                logger.debug(f"spec.origin={getattr(spec, 'origin', None)}; loader={getattr(spec, 'loader', None)}")

            module = importlib.import_module(module_name)
            if hasattr(module, "router"):
                app.include_router(module.router)
                logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω —Ä–æ—É—Ç–µ—Ä: {module_name} ‚Üí {module.router}")
            else:
                logger.warning(f"–ú–æ–¥—É–ª—å {module_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'router'")
        except ModuleNotFoundError as e:
            # –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥, —á—Ç–æ–± –ø–æ–Ω—è—Ç—å, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–∏–º—è –≤ e.name)
            logger.warning(f"ModuleNotFoundError –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {module_name}: {e}; e.name={getattr(e, 'name', None)}")
            logger.debug(traceback.format_exc())
        except Exception as e:
            logger.error(f"[import_all_routes] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {module_name}: {e}\n{traceback.format_exc()}")




@app.get("/")
async def root()    :
    return {"message": "Hello World"}

if __name__ == "__main__":

    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=9787)